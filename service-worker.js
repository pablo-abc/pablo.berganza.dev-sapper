!function(){"use strict";const e=["client/helpers.30ddd356.js","client/Head.bc4e8e76.js","client/Home.d0afff9f.js","client/index.dc7e7691.js","client/index.87aa7d36.js","client/about.f7fe4f2e.js","client/index.es.0e4d4ac4.js","client/Contact.d98d3122.js","client/BlogList.deb14dc1.js","client/index.e82ef2ca.js","client/[tag].dc99719f.js","client/[slug].21235589.js","client/index.e26f0c2b.js","client/index.4e0ad46f.js","client/index.744de9e6.js","client/[tag].abb936bb.js","client/[slug].b247b396.js","client/client.55340fff.js","client/client.ace561ab.js","client/Blog.4a8665e1.js"].concat(["service-worker-index.html",".DS_Store","CNAME","android-icon-144x144.png","android-icon-192x192.png","android-icon-36x36.png","android-icon-48x48.png","android-icon-72x72.png","android-icon-96x96.png","apple-icon-114x114.png","apple-icon-120x120.png","apple-icon-144x144.png","apple-icon-152x152.png","apple-icon-180x180.png","apple-icon-57x57.png","apple-icon-60x60.png","apple-icon-72x72.png","apple-icon-76x76.png","apple-icon-precomposed.png","apple-icon.png","browserconfig.xml","dracula.css","favicon-16x16.png","favicon-32x32.png","favicon-96x96.png","favicon.ico","global.css","img/.DS_Store","img/blog-pics/2019-03-18-800.jpg","img/blog-pics/2019-03-18-placeholder.jpg","img/blog-pics/2019-03-18.jpg","img/blog-pics/2019-06-11-800.jpg","img/blog-pics/2019-06-11-placeholder.jpg","img/blog-pics/2019-06-11.jpg","img/cljs-white.svg","img/profile-pic-400.jpeg","img/profile-pic-placeholder.jpeg","img/profile-pic.jpeg","manifest.json","ms-icon-144x144.png","ms-icon-150x150.png","ms-icon-310x310.png","ms-icon-70x70.png","overpass.css","site.css"]),n=new Set(e);self.addEventListener("install",n=>{n.waitUntil(caches.open("cache1587180938294").then(n=>n.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const n of e)"cache1587180938294"!==n&&await caches.delete(n);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const c=new URL(e.request.url);c.protocol.startsWith("http")&&(c.hostname===self.location.hostname&&c.port!==self.location.port||(c.host===self.location.host&&n.has(c.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1587180938294").then(async n=>{try{const c=await fetch(e.request);return n.put(e.request,c.clone()),c}catch(c){const i=await n.match(e.request);if(i)return i;throw c}}))))})}();
